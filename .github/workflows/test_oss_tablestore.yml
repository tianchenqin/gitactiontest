name: 'Terraform Plan and Apply'

on:
  push:
    branches: [dev] # 仅在推送到 main 分支时触发 plan
    paths:
      - '**.tf' # 仅当 Terraform 配置文件发生变化时触发
  pull_request:
    branches: [ "main" ] # 针对 main 分支的 PR 也会触发 plan
  workflow_dispatch: # 允许手动触发工作流，这对于运行 apply 很有用
  
    inputs:
      environment:
        description: 'Environment to run apply against'
        required: true
        default: 'dev'

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: standard-ghc
    environment: ${{ github.event.inputs.environment || 'dev' }} # 使用手动输入或默认环境

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1. 安装工具（保持不变）
      - name: Install Terraform
        run: |
          TERRAFORM_VERSION="1.6.0"
          wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
          unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          terraform --version

      - name: Install Terragrunt
        run: |
          TERRAGRUNT_VERSION="0.55.0"
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt --version    

      - name: Setup Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'          

      # - name: Check Tablestore DescribeTable via Python
      #   env:
      #     AK: ${{ secrets.ALICLOUD_ACCESS_KEY }}
      #     SK: ${{ secrets.ALICLOUD_SECRET_KEY }}
      #     INSTANCE: test-remote                # 实例名
      #     ENDPOINT: https://test-remote.cn-hangzhou.tablestore.aliyuncs.com
      #     TABLE: test_remote                   # 表名
      #   run: |
      #     pip install tablestore
      #     python -c '
      #     from tablestore import OTSClient, OTSClientError,OTSServiceError 
      #     import os
      #     import urllib3
      #     # 修复：用单引号包裹代理地址（避免与外层 python -c "..." 的双引号冲突）
      #     proxy_pool = urllib3.ProxyManager(
      #         "http://squid-service.squid.svc.cluster.local:3128",  # 代理地址（内层用双引号，外层用单引号）
      #         timeout=urllib3.Timeout(connect=5, read=6)  # 超时配置
      #     )
          
      #     ak = os.getenv("AK")
      #     sk = os.getenv("SK")
      #     instance_name = os.getenv("INSTANCE")
      #     endpoint = os.getenv("ENDPOINT")
      #     table_name = os.getenv("TABLE")
          
      #     try:
      #         # 传入代理连接池，确保请求走代理
      #         client = OTSClient(endpoint, ak, sk, instance_name)
      #         response = client.describe_table(table_name)
      #         print("table name", response.table_meta.table_name)
      #     except OTSServiceError as e1:
      #         print("RequestID:",e1.request_id)
      #         print("OTSServiceError:",e1)
      #         exit(1)
      #     except OTSClientError as e2:
      #         # 新增：捕获所有异常（如代理连接失败），便于排查
      #         print("Unexpected error:", str(e2))
      #         exit(1)
      #     '     # 关键：外层用单引号包裹 Python 代码，内层字符串用双引号，避免语法冲突
     
      - name: Terraform Init
        working-directory: terragrunt/dev/network_account
        run: terragrunt init
        env:
          # 如果你的后端配置需要认证，在此处或之前的步骤中设置相关环境变量或凭证
          # 例如，阿里云 OSS 后端可能需要 ACCESS_KEY 和 SECRET_KEY
              # 以下环境变量用于 Terragrunt/Terraform 初始化 OSS 后端
          ALICLOUD_ACCESS_KEY: ${{ secrets.ALICLOUD_ACCESS_KEY }}
          ALICLOUD_SECRET_KEY: ${{ secrets.ALICLOUD_SECRET_KEY }}
          ALICLOUD_REGION: "cn-hangzhou"
          TF_VAR_alicloud_access_key: ${{ secrets.ALICLOUD_ACCESS_KEY }}
          TF_VAR_alicloud_secret_key: ${{ secrets.ALICLOUD_SECRET_KEY }}
          TF_VAR_region: "cn-hangzhou"

      - name: Terraform Plan
        working-directory: terragrunt/dev/network_account
        run: |
          # 运行plan并确保输出文件
          terragrunt plan -input=false -out=tfplan
          # 验证文件是否生成
          find $(pwd) -name tfplan
          ls -al
        env:
          # 在此处设置 Terraform 可能需要的其他环境变量或云提供商认证信息
    # 以下环境变量用于 Terragrunt/Terraform 初始化 OSS 后端
          ALICLOUD_ACCESS_KEY: ${{ secrets.ALICLOUD_ACCESS_KEY }}
          ALICLOUD_SECRET_KEY: ${{ secrets.ALICLOUD_SECRET_KEY }}
          ALICLOUD_REGION: "cn-hangzhou"          
          TF_VAR_alicloud_access_key: ${{ secrets.ALICLOUD_ACCESS_KEY }}
          TF_VAR_alicloud_secret_key: ${{ secrets.ALICLOUD_SECRET_KEY }}
          TF_VAR_region: "cn-hangzhou"

      - name: Find tfplan path
        id: tfplan-path
        run: |
          path=$(find . -type f -name tfplan | grep .terragrunt-cache | head -n 1)
          if [ -z "$path" ]; then
            echo "tfplan path not found!"
            exit 1
          fi
          echo "TFPLAN_PATH=$path" >> $GITHUB_ENV          

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          # path: terragrunt/dev/network_account/tfplan
          path: ${{ env.TFPLAN_PATH }}
          if-no-files-found: error

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: standard-ghc
    needs: [terraform-plan] # 确保 apply 在 plan 成功之后运行
    environment: 
      name: ${{ github.event.inputs.environment || 'dev' }}
      # 可选：为生产环境添加手动批准
      # url: ${{ steps.deployment.outputs.environment_url }} 
    # 通常只在推送到主分支或手动触发时才运行 apply
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1. 安装工具（保持不变）
      - name: Install Terraform
        run: |
          TERRAFORM_VERSION="1.6.0"
          wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
          unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          terraform --version

      - name: Install Terragrunt
        run: |
          TERRAGRUNT_VERSION="0.55.0"
          wget https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64
          chmod +x terragrunt_linux_amd64
          sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
          terragrunt --version        



      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: terragrunt/dev/network_account

      - name: Terraform Init
        working-directory: terragrunt/dev/network_account
        run: terragrunt init
        env:
            # 以下环境变量用于 Terragrunt/Terraform 初始化 OSS 后端
          ALICLOUD_ACCESS_KEY: ${{ secrets.ALICLOUD_ACCESS_KEY }}
          ALICLOUD_SECRET_KEY: ${{ secrets.ALICLOUD_SECRET_KEY }}
          ALICLOUD_REGION: "cn-hangzhou"
          TF_VAR_alicloud_access_key: ${{ secrets.ALICLOUD_ACCESS_KEY }}
          TF_VAR_alicloud_secret_key: ${{ secrets.ALICLOUD_SECRET_KEY }}
          TF_VAR_region: "cn-hangzhou"

      - name: Find tfplan (apply)
        run: path=$(find terragrunt/dev/network_account/.terragrunt-cache -name tfplan | head -n 1); echo $path
      - name: Terraform Apply
        working-directory: terragrunt/dev/network_account
        run: terragrunt apply -input=false -auto-approve $path
        env:
            # 以下环境变量用于 Terragrunt/Terraform 初始化 OSS 后端
          ALICLOUD_ACCESS_KEY: ${{ secrets.ALICLOUD_ACCESS_KEY }}
          ALICLOUD_SECRET_KEY: ${{ secrets.ALICLOUD_SECRET_KEY }}
          ALICLOUD_REGION: "cn-hangzhou"
          TF_VAR_alicloud_access_key: ${{ secrets.ALICLOUD_ACCESS_KEY }}
          TF_VAR_alicloud_secret_key: ${{ secrets.ALICLOUD_SECRET_KEY }}
          TF_VAR_region: "cn-hangzhou"
